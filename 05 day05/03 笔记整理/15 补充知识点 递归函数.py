#!/usr/bin/env python3
#author:Alnk(李成果)

# 在讲今天的内容之前，我们先来讲一个故事，讲的什么呢？从前有座山，山里有座庙，庙里有个老和尚讲故事，
# 讲的什么呢？从前有座山，山里有座庙，庙里有个老和尚讲故事，讲的什么呢？
# 从前有座山，山里有座庙，庙里有个老和尚讲故事，讲的什么呢？
# 从前有座山，山里有座庙，庙里有个老和尚讲故事，讲的什么呢......
# 这个故事你们不喊停我能讲一天！
# 我们说，生活中的例子也能被写成程序，刚刚这个故事，让你们写，你们怎么写呀？
#
# def story():
#     s = """
#     从前有个山，山里有座庙，庙里老和尚讲故事，
#     讲的什么呢？
#     """
#     print(s)
#     story()
# story()


# 递归的定义——在一个函数里再调用这个函数本身
# 现在我们已经大概知道刚刚讲的story函数做了什么，就是在一个函数里再调用这个函数本身，这种魔性的使用函数的方式就叫做递归。
#
# 递归的最大深度——997
# def foo(n):
#     print(n)
#     n += 1
#     foo(n)
# foo(1)
# 由此我们可以看出，未报错之前能看到的最大数字就是997.当然了
#
# 我们当然还可以通过一些手段去修改它
# import sys
# print(sys.setrecursionlimit(100000))
# 我们可以通过这种方式来修改递归的最大深度，刚刚我们将python允许的递归深度设置为了10w
# 至于实际可以达到的深度就取决于计算机的性能了
# 不过我们还是不推荐修改这个默认的递归深度，
# 因为如果用997层递归都没有解决的问题要么是不适合使用递归来解决要么是你代码写的太烂


# 例一
# 现在你们问我，alex老师多大了？我说我不告诉你，但alex比 egon 大两岁。
# 你想知道alex多大，你是不是还得去问egon？egon说，我也不告诉你，但我比武sir大两岁。
# 你又问武sir，武sir也不告诉你，他说他比金鑫大两岁。
# 那你问金鑫，金鑫告诉你，他40了。。。
# 这个时候你是不是就知道了？alex多大？
#
# 1	金鑫　　	40
# 2	武sir　　	42
# 3	egon　　	44
# 4	alex　　　  46
# 你为什么能知道的？
# 首先，你是不是问alex的年龄，结果又找到egon、武sir、金鑫，你挨个儿问过去，
# 一直到拿到一个确切的答案，然后顺着这条线再找回来，
# 才得到最终alex的年龄。这个过程已经非常接近递归的思想。我们就来具体的我分析一下，这几个人之间的规律
#
# age(4) = age(3) + 2
# age(3) = age(2) + 2
# age(2) = age(1) + 2
# age(1) = 40
# 函数应该怎么写呢
# def age(n):
#     if n == 1:
#         return 40
#     else:
#         return age(n-1)+2
#
# print(age(4))


# 例二
# 递归函数与三级菜单
'''
menu = {
    '北京': {
        '海淀': {
            '五道口': {
                'soho': {},
                '网易': {},
                'google': {}
            },
            '中关村': {
                '爱奇艺': {},
                '汽车之家': {},
                'youku': {},
            },
            '上地': {
                '百度': {},
            },
        },
        '昌平': {
            '沙河': {
                '老男孩': {},
                '北航': {},
            },
            '天通苑': {},
            '回龙观': {},
        },
        '朝阳': {},
        '东城': {},
    },
    '上海': {
        '闵行': {
            "人民广场": {
                '炸鸡店': {}
            }
        },
        '闸北': {
            '火车战': {
                '携程': {}
            }
        },
        '浦东': {},
    },
    '山东': {},
}
'''

# def digui(dic):
#     while 1:
#         for k in dic:
#             print(k)
#         choice = input('>>>:').strip()
#
#         if choice == 'b' or choice =='q':
#             return choice
#
#         elif dic.get(choice):
#             ret = digui(dic[choice])
#             if ret == 'q':
#                 return
#
# digui(menu)