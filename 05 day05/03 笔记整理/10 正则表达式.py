#!/usr/bin/env python3
#author:Alnk(李成果)

# 我们使用的模块和这个模块要完成的功能是分不开的
# re模块 ：是用来在python中操作 正则表达式 的
# 要先知道正则表达式是什么？做什么用的？怎么用

# 正则表达式检测网站
# http://tool.chinaz.com/regex/

# 邮箱地址
# 用户名 密码
# 要检测一个用户输入的内容是否符合我的规则

# 用户输入的内容对于程序员来说都是字符串
# 一个文件是一堆字符串，有很多内容

# 检测某一个字符串是否符合规则 -- 本质 -- 需求一
# 从一大段文字中找到符合规则的字符串 -- 需求二

# 正则表达式  --> 字符串规则匹配的
# 1.判断某一个字符串是否符合规则
# 2.从一段文字中提取出符合规则的内容


# 初识正则表达式
#
# 字符组的概念。
# [ ]表示字符组，一个[ ]表示一个字符组
# [1-9]
# [0-9]
# [1-5]
# [a-z]
# [a-f]
# 1.对字母来说 区分大小写
# 2.a-f可以 f-a不行
# 一个字符位置上可以出现的内容是匹配数字或字母：[0-9a-zA-Z]
# 匹配一个两位数:# [1-9][0-9]


# 元字符
# \d    数字
# \w    数字 字母 下划线
# \s    空格 回车 制表符
# \t    制表符
# \n    回车
# \b    匹配一个单词的边界。例如 hello world  o\b会匹配hello的o
#
# \D    非数字
# \W    非数字字母下划线
# \S    非空白


# ^      一个字符串的开始
# $      一个字符串的结尾
# ^xxxx$  约束的了整个字符串中的内容必须一一与表达式对应上
# 例如: hello hello hello
# ^hello 只能匹配第一个hello
# hello$ 只能匹配最后一个hello
# hello^  不能匹配任何字符串。因为 ^ 是开头，没有可能在开头在出现字符。

# |       表示或
# 例子：匹配ab或abc  要这样写 abc|ab  把长的表达式写在前面

# ()      分组
#     # a(b|c)d
#例子：www.baidu.com www.baide.com  表达式 www.baid(u|e).com

# . 表示除了换行符以外的任意字符

# 非 字符组
# [^ABC] 只要不是ABC都能匹配


# 量词
# {n}   在这个量词前面的一个元字符出现n次
# {n,}  在这个量词前面的一个元字符出现n次或n次以上
# {n,m}  在这个量词前面的一个元字符出现n次到m次以上
#
# ?     在这个量词前面的一个元字符出现0次或者1次
# +     在这个量词前面的一个元字符出现1次或者多次
# *     在这个量词前面的一个元字符出现0次或者多次
#
# 例子：
# 1.匹配一个整数：\d+
# 2.匹配一个小数：\d+\.\d+
# 3.匹配整数或者小数： 表达式 \d+(\.\d+)?   括号里面的被量词?问号约束，约束了一组字符的出现次数

# 小练习
# 正则表达式默认都是贪婪匹配
# 贪婪匹配：会尽量多的帮我们匹配内容
# 例子 待匹配字符：李杰和李莲英和李二棍子  正则表达式：李.?   匹配结果：李杰  李莲  李二 匹配到这3条

# 回溯算法下的贪婪匹配
# 例子：待匹配字符:<a>bbbb<a> 正则表达式:<.*> 匹配结果:<a>bbbb<a>

# 非贪婪模式，
# 在量词后面加一个问号，开启非贪婪模式
# 惰性匹配：尽量少的匹配
# 例子：待匹配字符:<a>bbbb<a> 正则表达式:<.*?> 匹配结果:<a>    <a>  这两条

# 例子 待匹配字符：李杰和李莲英和李二棍子  正则：李[杰莲英二棍子]*    匹配结果：李杰 李莲英 李二棍子
# 例子 待匹配字符：李杰和李莲英和李二棍子  正则：李[^和]*             匹配结果：李杰 李莲英 李二棍子

# 例子
# 身份证号码是一个长度为15或18个字符的字符串，如果是15位则全部🈶️数字组成，首位不能为0；
# 如果是18位，则前17位全部是数字，末位可能是数字或x
# ^[1-9]\d{14}(\d{2}[x\d])?$
# ^([1-9]\d{16}[\dx]|[1-9]\d{14})$

# 转义符例子
# r'\\n' 匹配 '\n'

# .*?x   ：爬虫常用 ，表示匹配任意字符，直到遇见x停止


# 练习题
# 1、 匹配一段文本中的每行的邮箱
#       http://blog.csdn.net/make164492212/article/details/51656638
#
# 2、 匹配一段文本中的每行的时间字符串，比如：‘1990-07-12’；
#
#    分别取出1年的12个月（^(0?[1-9]|1[0-2])$）、
#    一个月的31天：^((0?[1-9])|((1|2)[0-9])|30|31)$
#
# 3、 匹配qq号。(腾讯QQ号从10000开始)  ［1,9］[0,9]{4,}
#
# 4、 匹配一个浮点数。       ^(-?\d+)(\.\d+)?$   或者  -?\d+\.?\d*
#
# 5、 匹配汉字。             ^[\u4e00-\u9fa5]{0,}$
#
# 6、 匹配出所有整数