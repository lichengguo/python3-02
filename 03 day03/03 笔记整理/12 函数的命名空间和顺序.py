#!/usr/bin/env python3
#author:Alnk(李成果)
"""
函数里面的变量，在函数外面能直接引用么？
def func1():
    m = 1
    print(m)
print(m)  #这行报的错

报错了：
NameError: name 'm' is not defined

我们首先回忆一下Python代码运行的时候遇到函数是怎么做的，从Python解释器开始执行之后，就在内存中开辟里一个空间。
每当遇到一个变量的时候，就把变量名和值之间对应的关系记录下来，但是当遇到函数定义的时候，解释器只是象征性的将函数名读入内存，
表示知道这个函数存在了，至于函数内部的变量和逻辑，解释器根本不关心。等执行到函数调用的时候，
Python解释器会再开辟一块内存来储存这个函数里面的内容，这个时候，才关注函数里面有哪些变量，
而函数中的变量会储存在新开辟出来的内存中，函数中的变量只能在函数内部使用，并且会随着函数执行完毕，这块内存中的所有内容也会被清空。

我们给这个‘存放名字与值的关系’的空间起了一个名字 --- 命名空间。
代码在运行伊始，创建存储“变量名与值的关系”的空间叫做全局命名空间；
在函数的运行中开辟的临时的空间叫做局部命名空间。
"""
# python的空间分三种：
# 全局名称空间
# 局部名称空间
# 内置名称空间  print() len() 内置函数
#
# 举例
# def func():
#     name = 'alex'
# func()
# print(name)
# func()
# python中的作用域分两种：
# 全局作用域：内置名称空间 全局名称空间
# 局部作用域：局部名称空间


# 取值顺序: 就近原则
# 局部变量先到局部寻找，局部没找到才去全局找，全局没找到，去内置找，都没找到，就报错
# 全局变量直接在全局查找，全局没有就去内置空间查找，如果没有，就报错
# 局部名称空间 ———> 全局名称空间 ———> 内置名称空间    （这个顺序不可逆）
# input = 'barry'
# def func():
#     # input = 'alex'
#     print(input)
# func()
# print(input)


# 加载顺序
# 所有的东西要加载到内存才运行
# 内置名称空间  --->  全局名称空间 --->  局部名称空间