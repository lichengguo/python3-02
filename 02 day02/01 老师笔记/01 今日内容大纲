01 上上周内容回顾
    print('打印')
    python的历史
    编译型解释型
    种类
    cpython ipython Jpython .... pypy
    变量：
        必须数字字母下划线任意组合。
        不能以数字开头。
        不能使用python中的关键字。
        要具有描述性。 age = 12
        最好不要使用中文。
        下划线以及驼峰体。
    常量： 一直不变的量。全部大写的变量就是常量。
    注释：
        单行注释：#
        多行注释：''' '''  """ """
    数据类型初始：
        int bool str。

    用户输入：input('提示语')

    流程控制语句：if
        if 条件:
            执行语句
    单独if
    if else
    if elif elif ....
    if elif elif .... else
    if 条件:
        if 条件:
            pass
    流程控制语句while
        while 条件:
            循环体
    如何终止while循环?
        1,不满足条件。
        2，break。
    break continue
    while else:

02 pycharm安装以及简单操作
03 格式化输出
04 运算符
    算数运算，逻辑运算，赋值运算，比较运算，位运算，成员运算，身份运算...
    算数运算： +-*/%  ** //
    逻辑运算: and or not
    赋值运算: = += -= *= ...
    比较运算: == > < >= <= !=
    成员运算: 我中有你

05 编码1
    认知：随着年龄和阅历而变化的。

    谍战剧： 场景 发电报 滴滴滴滴滴滴滴
    计算机：文件的存储或者网络传输 高低电平01010101
    密码本：记录的就是010101 与文字的对应关系。
        今       0000001
        晚       0000101
        吃       0000110
        鸡       0010001

        # 0010101011010001
        0000001000010100001100010001

    ASCII：最初版本的密码本：英文字母，数字，特殊字符

        最开始：
            0000 0001   256种可能。
            0000 0001  8位 = 1个字节（bytes）。
            s1 = 'hello1' 6个字节
            一个字节表示一个字符。
            h: 01101000
            e: 01101001
            l: 01101100
            o: 01101110
            1:
            01101000 01101001 01101100 01101100 01101110 01101111

    unicode：万国码。把全世界所有的文字都记录起来。
        起初：一个字符两个字节
            h: 01101000 01101000
            中：01101000 01101000
            不够用
        升级：一个字符四个字节
            h: 01101000 01101000 01101000 01101000
            中: 01111000 01101000 01101000 01101000
        浪费空间，浪费流浪

    utf-8: 最少用8位一个字节表示一个字符。
        h: 01101000 ASCII 英文字符：1个字节表示
        Tú.: 01101000 01101000 一个字符两个字节表示
        中: 01101000 01101100 01101000 一个字符用3个字节表示。
        'old男孩' utf-8的编码方式： 9个字节

    gbk:国标。
        只包含：英文和本国语言。
         h: 01101000 ASCII 英文字符：1个字节表示
         中: 01101000 01101100 一个字符用2个字节表示
         'old男孩' gbk的编码方式： 7个字节

    单位转化：
        8bit  ==   1bytes
        1024bytes ==  1KB
        1024KB    ==  1MB
        1024MB    ==  1GB
        1024GB    ==  1TB

06 数据类型的转换1
bool <---> int
str  <--->  int
s1 = '100'  全部由数字组成的str ---> int
int(s1)
str(100)
str  <--->  bool  非空即True   '' 空即False


07 基础数据类型 str
08 基础数据类型 list(tuple)
    why:
        str：
            'alex123'
            1,存储少量数据。
            2，数据类型单一。
        容器类的数据类型：基础数据类型之一：list。
    what:基础数据类型之一：list。
        l1 = [1,'alex',True,[1,2,3], ().....]
        列表可以存储大量的数据，列表是有顺序的。列表有索引，切片，切片（步长）
    how:
    where:
        当你需要大量数据进行存储，并且是按照一定顺序，考虑到list

    元组：

09 基础数据类型 dict

    why:
        1,列表的数据量越大，查询速度越慢。
        2，列表存储的数据没有什么关联性。

    what:基础数据类型之dict
        dic = {'name': 'barry'}
        字典是以键值对的形式存储的。
        数据类型的划分：
            可变的（不可哈希）数据类型：list dict set
            不可变（可哈希）的数据类型：tuple str int bool

        字典的键key：必须是不可变得数据类型：int str
        字典的值：任意数据类型 变量，对象。
        字典可以存储大量的数据，而且字典的查询速度非常快。
        字典的key 唯一的不重复的。
        字典 3.5之前是无序的。
        字典在3.5之后是有序的初始化时的顺序。

    how:
    where:
        构建数据类型：大量的关系型数据时，要想到字典。

10 基础数据类型的补充（汇总）。
int str bool list tuple dict
# 数据类型的转换。


12 编码2.

ASCII：最初版本的密码本：英文字母，数字，特殊字符

        最开始：
            0000 0001   256种可能。
            0000 0001  8位 = 1个字节（bytes）。
            s1 = 'hello1' 6个字节
            一个字节表示一个字符。

    unicode：万国码。把全世界所有的文字都记录起来。
        起初：一个字符两个字节
            h: 01101000 01101000
            中：01101000 01101000
            不够用
        升级：一个字符四个字节
            h: 01101000 01101000 01101000 01101000
            中: 01111000 01101000 01101000 01101000
        浪费空间，浪费流浪

    utf-8: 最少用8位一个字节表示一个字符。
        h: 01101000 ASCII 英文字符：1个字节表示
        Tú.: 01101000 01101000 一个字符两个字节表示
        中: 01101000 01101100 01101000 一个字符用3个字节表示。
        'old男孩' utf-8的编码方式： 9个字节

    gbk:国标。
        只包含：英文和本国语言。
         h: 01101000 ASCII 英文字符：1个字节表示
         中: 01101000 01101100 一个字符用2个字节表示
         'old男孩' gbk的编码方式： 7个字节

    1， 不同密码本之间不能互相识别。报错，乱码。
    2， 数据的存储或者网络传输不能用unicode的密码本进行编码。


    python3x 环境：
        str类型内部编码方式为Unicode。
        所以：str类数据不能直接存储硬盘，或者网络传输。
    int
    bool
    str: 操作方法
    bytes: 拥有和str相同的操作方式
    list
    tuple
    dict

        str类型内部编码方式为Unicode。
        bytes类型内部编码方式为非Unicode。

    英文：
        str:
            表现形式：'alex'
            内部编码：unicode

        bytes:
            表现形式：b'alex'
            内部编码：非unicode

    中：
        str:
            表现形式：'alex'
            内部编码：unicode

        bytes:
            表现形式：b'\xe4\xb8\xad\xe5\x9b\xbd'
            内部编码：非unicode


11 深浅copy。
13 基础数据类型 set（了解）。