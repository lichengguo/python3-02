day13



上节回顾
1 ECMAScript
      (1) 变量声明  var   let
	  (2) 数据类型
	        字符串  ""
			数组    []
			number  12 3.14
			boolean true false
			undefined  undefined
			null       null
			object  obj={"name":"alex",}
	  
	  (3) 运算符 ++  --   ===
	  
	  (4) 流程控制语句
	      if  else
		  for
		  while
		  switch
		  
	  (5) 对象:
	      String
		  Array
		  Math
		  Date
		  Function
		  
2 BOM
    
	1 window对象
	  
	  window.alert()
	  window.confirm()
	  window.prompt()
	  
	  window.open()
	  window.close()
	  
	  var ID=window.setInterval(function(){},1000)
	  window.clearInterval(ID)
	  
	  var ID=window.setTimeout(function(){},1000)
	  window.clearTimeout(ID)
	  
	  定时器案例
	  
3 DOM
    节点：
		document对象
		element对象(泛指)
	
	
	
	1 查找标签
	  (1) 直接查找
	        全局查找
				document.getElementById(“idname”)
				document.getElementsByTagName(“tagname”)
				document.getElementsByName(“name”)
				document.getElementsByClassName(“name”)
			
			局部查找
			
			     <div id='“idname”'>
				      ...
                 </div>		
				 
			     ele=document.getElementById(“idname”)
				 ele.getElementsByClassName("c1")

      (2) 导航查找
            parentElement           // 父节点标签元素
			children                // 所有子标签
			firstElementChild       // 第一个子标签元素
			lastElementChild        // 最后一个子标签元素
			nextElementtSibling     // 下一个兄弟标签元素
			previousElementSibling  // 上一个兄弟标签元素	  
		  
    2 操作标签
	
	    (1) 操作文本
		    取值操作：
			    # dom:   <p>123</p>
			    dom:   <p><a>123</a></p>
				dom.innerHTML : <a>123</a>
				dom.innerText : 123    
	        赋值文本
			    dom.innerHTML="yuan"  # <p>yuan</p>
			    dom.innerText="yuan"  # <p>yuan</p>
                dom.innerHTML="<span>111</span>"  #  <p><span>111</span></p>
                dom.innerText="<span>111</span>"  #  <p>'<span>111</span>'</p>
				
		(2) 操作value
		    针对 input,select,textare标签:
			  dom.value
			  dom.value="123"
			  
	    (3) 操作属性
		    dom=<span id="i1" class="c1 c2 c3">123</span>
		    dom.setAttribute(name,value)    
			dom.getAttribute(属性名)     
            dom.removeAttribute(“属性名”);
			
	    (4) class属性操作
		    dom.classList.add("c4")
		    dom.classList.remove("c1")
		    
		(5) css的样式操作 
		    dom.style.color="red"
        
		(6) 节点的增删该查
		    // 创建节点/DOM
			document.createElement("p");  //  <p></p>
		    //  添加节点:
			添加节点的父节点.appendChild(添加节点)	
			//  删除节点: 
			删除节点父节点.removeChild(删除节点)
			parent2.removeChild(img);
			//  替换节点
			提花节点的父节点.replaceChild(新节点,旧节点)
			
			案例：二级联动
			
	
		
    3 事件绑定

        dom对象.onclick=function () {
				//  this 指代的是事件触发的dom对象
				   
			    }	
            
Jquery：



    Jquery类==$类
    Jquery对象==$()
	
	document.getElementsByClassName("c1")  # [dom,dom2,...]
	  $(".c1") # [dom,dom2,]
	  集合类型：
	         1 元素一定是DOM对象
	         2 提供了更多的方法

	  dom对象和jquery对象的转换 
              
			  
			       $()[0]
      $(".c1")----------------->DOM对象
	          <-----------------
			       $(DOM) # [DOM,] 
	
	
	1 查找标签
	  
				   
	2 操作标签
	
	    (1) 文本操作
		    $().html()
		    $().text()
		(2) value操作
		    针对 input,select ,textarea
		    $().val() 
		(3) 属性操作
		    $().attr(属性名,属性值)
			
		(4) class操作
		    $().addClass()
		    $().removeClass()
		     
			 
		(5) css样式操作
		    $().css("color","red")
		
		(6) 节点操作
		
		    // 创建节点
			var $ele=$("<img>")   // [img,]
	        $ele.attr("src",'')
			
			// 添加节点
			$("父节点").append($ele);  // 添加节点对象
			$("父节点").append("<img src=''>");  // 添加节点字符串
	
	 
	3 each循环
	  
	
	4 绑定事件
	    
		    $("ul li").click(function () {
				   //  alert(this.innerHTML)
				  // this: 当前触发DOM
				   alert($(this).html())
				})
	
	
	
	
bootstrap

    Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。
	
	栅格系统:
	    pass
		



	
	
	
	


	
				
				
				
				
  	